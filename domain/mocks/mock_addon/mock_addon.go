// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/myusufirfanh/go-demo-service/domain/addon (interfaces: Usecase,Repository)

// Package mock_addon is a generated GoMock package.
package mock_addon

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
	models "github.com/myusufirfanh/go-demo-service/models"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetAddon mocks base method.
func (m *MockUsecase) GetAddon(arg0 echo.Context, arg1 int64) (*models.Addon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddon", arg0, arg1)
	ret0, _ := ret[0].(*models.Addon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddon indicates an expected call of GetAddon.
func (mr *MockUsecaseMockRecorder) GetAddon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddon", reflect.TypeOf((*MockUsecase)(nil).GetAddon), arg0, arg1)
}

// GetAllAddonsByProductID mocks base method.
func (m *MockUsecase) GetAllAddonsByProductID(arg0 echo.Context, arg1 int64) ([]models.Addon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddonsByProductID", arg0, arg1)
	ret0, _ := ret[0].([]models.Addon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddonsByProductID indicates an expected call of GetAllAddonsByProductID.
func (mr *MockUsecaseMockRecorder) GetAllAddonsByProductID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddonsByProductID", reflect.TypeOf((*MockUsecase)(nil).GetAllAddonsByProductID), arg0, arg1)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetAddon mocks base method.
func (m *MockRepository) GetAddon(arg0 int64) (*models.Addon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddon", arg0)
	ret0, _ := ret[0].(*models.Addon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddon indicates an expected call of GetAddon.
func (mr *MockRepositoryMockRecorder) GetAddon(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddon", reflect.TypeOf((*MockRepository)(nil).GetAddon), arg0)
}

// GetAllAddonsByProductID mocks base method.
func (m *MockRepository) GetAllAddonsByProductID(arg0 int64) ([]models.Addon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddonsByProductID", arg0)
	ret0, _ := ret[0].([]models.Addon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddonsByProductID indicates an expected call of GetAllAddonsByProductID.
func (mr *MockRepositoryMockRecorder) GetAllAddonsByProductID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddonsByProductID", reflect.TypeOf((*MockRepository)(nil).GetAllAddonsByProductID), arg0)
}
