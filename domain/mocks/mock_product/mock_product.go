// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/myusufirfanh/go-demo-service/domain/product (interfaces: Usecase,Repository)

// Package mock_product is a generated GoMock package.
package mock_product

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	echo "github.com/labstack/echo"
	models "github.com/myusufirfanh/go-demo-service/models"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AlterProductPrice mocks base method.
func (m *MockUsecase) AlterProductPrice(arg0 echo.Context, arg1 models.Product) models.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AlterProductPrice", arg0, arg1)
	ret0, _ := ret[0].(models.Product)
	return ret0
}

// AlterProductPrice indicates an expected call of AlterProductPrice.
func (mr *MockUsecaseMockRecorder) AlterProductPrice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AlterProductPrice", reflect.TypeOf((*MockUsecase)(nil).AlterProductPrice), arg0, arg1)
}

// GetAddonsByProductID mocks base method.
func (m *MockUsecase) GetAddonsByProductID(arg0 echo.Context, arg1 int64) ([]models.Addon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonsByProductID", arg0, arg1)
	ret0, _ := ret[0].([]models.Addon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddonsByProductID indicates an expected call of GetAddonsByProductID.
func (mr *MockUsecaseMockRecorder) GetAddonsByProductID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonsByProductID", reflect.TypeOf((*MockUsecase)(nil).GetAddonsByProductID), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockUsecase) GetProduct(arg0 echo.Context, arg1 int64) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockUsecaseMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockUsecase)(nil).GetProduct), arg0, arg1)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetProduct mocks base method.
func (m *MockRepository) GetProduct(arg0 echo.Context, arg1 int64) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockRepositoryMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockRepository)(nil).GetProduct), arg0, arg1)
}

// TxInsertProduct mocks base method.
func (m *MockRepository) TxInsertProduct(arg0 echo.Context, arg1 *gorm.DB, arg2 *models.Product) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxInsertProduct", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxInsertProduct indicates an expected call of TxInsertProduct.
func (mr *MockRepositoryMockRecorder) TxInsertProduct(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxInsertProduct", reflect.TypeOf((*MockRepository)(nil).TxInsertProduct), arg0, arg1, arg2)
}
